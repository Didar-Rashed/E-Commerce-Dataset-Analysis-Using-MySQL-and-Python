-- 1. List all unique cities where customers are located.

select distinct (upper(customer_city)) as Customer_City from customers;

-- 2. Count the number of orders placed in 2017.

select count(order_id) from orders where year(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category

select upper(products.product_category), round(sum(payments.payment_value),2) as Total_Sales
from payments
join order_items on payments.order_id = order_items.order_id
join products on order_items.product_id = products.product_id
group by products.product_category;

-- 4. Calculate the percentage of orders that were paid in installments.

select (sum(case when payment_installments >= 1 then 1 else 0 end)/count(*))*100 as payment_installments_percentage 
from payments;

-- 5. Count the number of customers from each state.

select customer_state, count(customer_id) as Customer_Number
from customers
group by customer_state;

-- 6. Calculate the number of orders per month in 2018

select monthname(order_purchase_timestamp) as month, count(order_id) as Order_Count 
from orders
where year(order_purchase_timestamp) = 2018
group by monthname(order_purchase_timestamp);

-- 7. Find the average number of products per order, grouped by customer city.

with count_per_order as (select orders.order_id, orders.customer_id, count(order_items.order_id) as order_count
from orders
join order_items on orders.order_id = order_items.order_id
group by orders.order_id, orders.customer_id)

select upper(customers.customer_city) as customer_city, round(avg(count_per_order.order_count),2) as average_order
from count_per_order
join customers on count_per_order.customer_id = customers.customer_id
group by customers.customer_city;

-- 8. Calculate the percentage of total revenue contributed by each product category.

select upper(products.product_category), round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) as Percentage_of_total_revenue
from payments
join order_items on payments.order_id = order_items.order_id
join products on order_items.product_id = products.product_id
group by products.product_category
order by  Percentage_of_total_revenue desc;

-- 9. Identify the correlation between product price and the number of times a product has been purchased.

select upper(products.product_category), count(order_items.product_id) as purchased_times, round(avg(order_items.price),2) avg_price
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category;

-- 10. Calculate the total revenue generated by each seller, and rank them by revenue.

select * , dense_rank() over(order by total_revenue desc) as "rank" from 
(select sellers.seller_id, round(sum(payments.payment_value),2) as total_revenue
from sellers join order_items
on sellers.seller_id = order_items.seller_id
join payments on order_items.order_id = payments.order_id
group by sellers.seller_id) as T;

-- 11. Calculate the cumulative sales per month for each year.

select Year, Month, round(sum(Payment) over (order by Year, Month),2) as comulative_sales from
(select year(orders.order_purchase_timestamp) As Year, month(orders.order_purchase_timestamp) as Month, round(sum(payments.payment_value),2) as Payment
from orders join payments
on orders.order_id = payments.order_id
group by Year, Month
order by Year) as T;

-- 12. Calculate the year-over-year growth rate of total sales.

with CTE as (select year(orders.order_purchase_timestamp) As Year, round(sum(payments.payment_value),2) as Payment
from orders join payments
on orders.order_id = payments.order_id
group by Year
order by Year)
select Year, Payment, round(((Payment - lag(payment,1) over (order by year))/(lag(payment,1) over (order by year)))*100,2) as "YOY % Growth"
from CTE;

-- 13. 5. Identify the top 3 customers who spent the most money in each year.

select year, customer_id, payment, d_rank from
(select year(orders.order_purchase_timestamp) as year, orders.customer_id, round(sum(payments.payment_value),2) as payment,
dense_rank() over(partition by year(orders.order_purchase_timestamp) order by sum(payments.payment_value)desc) as "d_rank"
from orders join payments
on orders.order_id = payments.order_id
group by year(orders.order_purchase_timestamp), orders.customer_id) as a
where d_rank <= 3;










